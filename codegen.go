// This program is free software: you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation, either version 3 of the License, or (at your option)
// any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program.  If not, see <http://www.gnu.org/licenses/>.

package rwc

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
)

func printArr(w io.Writer, name string, a []uint32) {
	fmt.Fprintf(w, "%s: [%d]uint32 {\n", name, len(a))
	s := ""
	for _, v := range a {
		s += fmt.Sprintf("%d, ", v)
		if len(s) > 60 {
			fmt.Fprintln(w, s)
			s = ""
		}
	}
	if s != "" {
		fmt.Fprintln(w, s)
	}
	fmt.Fprintln(w, "},")
}

// Source returns the Go code for initializing Constructor,
// like the code you can see in the autogenerated.go
func (c *Constructor) Source() []byte {
	w := new(bytes.Buffer)
	fmt.Fprintln(w, `// Generated code; DO NOT EDIT.
	
package rwc

// DefaultConstructor is the default word constructor.
var DefaultConstructor = Constructor {`)
	printArr(w, "ng4", c.ng4[:])
	printArr(w, "ng3", c.ng3[:])
	printArr(w, "ng3beg", c.ng3beg[:])
	printArr(w, "ng3end", c.ng3end[:])
	printArr(w, "ng2", c.ng2[:])
	fmt.Fprintf(w, "ng1: %d,\n", c.ng1)
	fmt.Fprintln(w, "}")
	source, _ := format.Source(w.Bytes())
	return source
}
